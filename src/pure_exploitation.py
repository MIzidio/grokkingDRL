import gymnasium as gym
import numpy as np

from bandit_slippery_walk import BanditSlipperyWalk

# gym.pprint_registry()
def pure_exploitation(env, n_episodes=10):
    Q = np.zeros((env.action_space.n))
    N = np.zeros((env.action_space.n))

    Qe = np.empty((n_episodes, env.action_space.n))
    returns = np.empty(n_episodes, dtype=np.float64)
    actions = np.empty(n_episodes, dtype=np.int32)

    for e in range(n_episodes):
        action = np.argmax(Q)

        _, reward, _, _, _ = env.step(action)
        N[action] += 1
        Q[action] = Q[action] + (reward - Q[action])/N[action]

        Qe[e] = Q
        returns[e] = reward
        actions[e] = action

    return Qe, returns, actions

env = BanditSlipperyWalk()
env.reset()
[Qe, returns, actions] = pure_exploitation(env)
np.set_printoptions(precision=4)
print(Qe)